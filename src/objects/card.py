import discord, random
from errors import *
from data import db_gacha
from objects.series import Series

types = {
    1: "Summoned",
    2: "Crafted",
    3: "Limited"
} # TODO: move this shit in config
rating = {
    1: "Common",
    2: "Uncommon",
    3: "Rare",
    4: "Mythical",
    5: "Legendary",
    6: "Divine"
}

class Card:
    """
    A Card object to store information about a Card within
    a User's gacha inventory.
    """
    def __init__(
        self, _id, _name, _acquired, _cost, _disenchant,
        _first_user, _full_url, _icon_url, _is_flagship,
        _is_exclusive, _points, _rating, _type, _series_id,
        _submitter
    ):
        self.id = _id
        self.name = _name
        self.acquired = _acquired
        self.cost = _cost
        self.disenchant = _disenchant
        self.first_user = _first_user
        self.full_url = _full_url
        self.icon_url = _icon_url
        self.is_flagship = _is_flagship
        self.is_exclusive = _is_exclusive
        self.points = _points
        self.rating = _rating
        self.type = _type
        self.series_id = _series_id
        self.submitter = _submitter

    @property
    def series(self):
        return Series.get_from_id(self.series_id)

    def make_embed(self):
        e = discord.Embed(title=self.name, color=0xff1155)
        e.set_image(url=self.full_url)

        # v = f"From **{self.series.name}**\n" # TODO: Make series objects
        v = f"From **{self.series.name}**\n"
        
        if self.is_exclusive:
            v += "**[IPM-Exclusive]**\n"

        v += f"Card Type: **{types[self.type]}**\n"
        v += f"Banish Gain: **{self.disenchant}** ðŸ’Ž | Summon Cost: **{self.cost}** ðŸ’Ž\n"
        a = f"Yes, first by {self.first_user}" if self.acquired else "No"
        v += f"Acquired? **{a}**"

        e.add_field(name=rating[self.rating], value=v)
        return e

    def __repr__(self):
        return f'Card: {self.name}, {"*"*self.rating}'

    def register_first(self, user):
        """Registers a user who has acquired a Card for the first time."""
        db = db_gacha.GachaHelper(False)
        db.connect()
        db.update_column('cards', 'card_acquired', True, card_id=self.id)
        db.update_column('cards', 'card_user', str(user), card_id=self.id)
        db.close()
        self.first_user = str(user)
        self.acquired = True

    @classmethod
    def get_from_dict(cls, dictionary):
        """
        Initializes a Card object from a dictionary
        generated by the Google Sheets API.

        Args:
            dictionary (dict): dictionary from Google Sheets.
        """
        return cls(
            dictionary["card_id"], 
            dictionary["card_name"], 
            bool(dictionary["card_acquired"]), 
            dictionary["card_cost"], 
            dictionary["card_disenchant"], 
            dictionary["card_user"], 
            dictionary["card_full_url"], 
            dictionary["card_icon_url"], 
            bool(dictionary["card_is_flagship"]), 
            bool(dictionary["card_is_exclusive"]), 
            dictionary["card_points"], 
            dictionary["card_rating"], 
            dictionary["card_type"], 
            dictionary["card_series_id"], 
            dictionary["card_submitter"]
        )

    @classmethod
    def get_from_db(cls, dictionary):
        """
        Initializes a Card object from a dictionary
        generated by the GachaHelper DB.

        Args:
            dictionary (dict): dictionary from GachaHelper results.
        """
        return cls(
            dictionary["card_id"], 
            dictionary["card_name"], 
            bool(dictionary["card_acquired"]), 
            dictionary["card_cost"], 
            dictionary["card_disenchant"], 
            dictionary["card_user"], 
            dictionary["card_full_url"], 
            dictionary["card_icon_url"], 
            bool(dictionary["card_is_flagship"]), 
            bool(dictionary["is_exclusive"]), 
            dictionary["card_points"], 
            dictionary["card_rating"], 
            dictionary["card_type"], 
            dictionary["card_series_id"], 
            dictionary["card_submitter"]
        )

    @classmethod
    def get_from_id(cls, card_id):
        """
        Initializes a Card object from an ID.

        Args:
            card_id (int): ID of the Card you wish to fetch.
        """
        db = db_gacha.GachaHelper(False)
        db.connect()
        result = db.get_card(card_id)
        db.close()
        return result

    @classmethod
    def get_from_name(cls, card_name):
        """
        Initializes a Card object from a name.

        Args:
            card_name (str): Name of the Card you wish to fetch.
        """
        db = db_gacha.GachaHelper(False)
        db.connect()
        result = db.get_card_from_name(card_name)
        db.close()
        return result

    @staticmethod
    def make_booster_pack(rating_list):
        """
        Initializes a Card object from a name.

        Args:
            card_name (str): Name of the Card you wish to fetch.
        """
        db = db_gacha.GachaHelper(False)
        card_list = []

        db.connect()
        for rating in rating_list:
            all_cards = [_c for _c in db.get_cards_from_rating(rating) if _c.type == 1]
            if len(all_cards) == 0:
                continue
            random.shuffle(all_cards)
            card_list.append(all_cards[0])
        db.close()
        return card_list