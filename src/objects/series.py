import discord, math
from data import db_gacha

class Series:
    """
    A wrapper for gacha series, conaining Card objects that
    represent flagship cards, member cards, and et cetera.
    """
    def __init__(self, s_id, s_name, s_url):
        self.id = int(s_id)
        self.name = s_name
        self.icon_url = s_url

    def make_embed(self, page):
        e = discord.Embed(title=self.name, color=0xff1155)
        e.set_thumbnail(url=self.icon_url)
        db = db_gacha.GachaHelper(False)
        db.connect()
        self.cards = sorted(db.get_cards_from_series(self.id), key=lambda x:x.name)
        db.close()

        self.max_pages = math.ceil(len(self.cards)/10)

        if len(self.cards) == 0:
            e.add_field(name="This series does not have any cards yet.", value=' ')
            return e
    
        _p = range(0,len(self.cards),10)
        current_page_cards = self.cards[_p[page]:_p[page]+10]

        card_str = '' # TODO: modify if user owns cards
        for card in current_page_cards:
            card_str += '{} {}\n'.format(card.name, card.rating*'â˜†')

        e.add_field( # TODO: add number of owned cards
            name=f"Cards you own: (placeholder/{len(self.cards)})",
            value=card_str
            )

        if self.max_pages > 1:
            e.set_footer(text=f"Page {page+1}/{self.max_pages}")

        return e

    @classmethod
    def get_from_dict(cls, _d):
        """Instantiate an object from Google Sheets API dictionary"""
        return cls(_d["series_id"], _d["series_name"], _d["series_icon_url"])

    @classmethod
    def get_from_db(cls, dictionary):
        """
        Initializes a Card object from a dictionary
        generated by the GachaHelper DB.

        Args:
            dictionary (dict): dictionary from GachaHelper results.
        """
        return cls(
            dictionary["series_id"], 
            dictionary["series_name"],
            dictionary["series_icon_url"]
        )

    @classmethod
    def get_from_id(cls, series_id):
        """
        Initializes a Series object from an ID.

        Args:
            series_id (int): ID of the series you wish to fetch.
        """

        db = db_gacha.GachaHelper(False)
        db.connect()
        result = db.get_series(series_id)
        db.close()
        return result

    @classmethod
    def get_from_name(cls, series_name):
        """
        Initializes a Series object from a name.

        Args:
            series_name (str): Name of the Series you wish to fetch.
        """
        db = db_gacha.GachaHelper(False)
        db.connect()
        result = db.get_series_from_name(series_name)
        db.close()
        return result